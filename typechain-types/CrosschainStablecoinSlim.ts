/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CrosschainStablecoinSlimInterface extends utils.Interface {
  contractName: "CrosschainStablecoinSlim";
  functions: {
    "_minimumCollateralPercentage()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "borrowToken(uint256,uint256)": FunctionFragment;
    "checkCollateralPercentage(uint256)": FunctionFragment;
    "checkCost(uint256)": FunctionFragment;
    "checkExtract(uint256)": FunctionFragment;
    "checkLiquidation(uint256)": FunctionFragment;
    "closingFee()": FunctionFragment;
    "collateral()": FunctionFragment;
    "createVault()": FunctionFragment;
    "debtRatio()": FunctionFragment;
    "depositCollateral(uint256,uint256)": FunctionFragment;
    "destroyVault(uint256)": FunctionFragment;
    "ethPriceSource()": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "gainRatio()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getClosingFee()": FunctionFragment;
    "getDebtCeiling()": FunctionFragment;
    "getEthPriceSource()": FunctionFragment;
    "getPaid()": FunctionFragment;
    "getTokenPriceSource()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "liquidateVault(uint256)": FunctionFragment;
    "mai()": FunctionFragment;
    "maticDebt(address)": FunctionFragment;
    "minDebt()": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "payBackToken(uint256,uint256)": FunctionFragment;
    "priceSourceDecimals()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "stabilityPool()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenPeg()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalBorrowed()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "treasury()": FunctionFragment;
    "uri()": FunctionFragment;
    "vaultCollateral(uint256)": FunctionFragment;
    "vaultCount()": FunctionFragment;
    "vaultDebt(uint256)": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawCollateral(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_minimumCollateralPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCollateralPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkExtract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethPriceSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gainRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClosingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtCeiling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthPriceSource",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPaid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mai", values?: undefined): string;
  encodeFunctionData(functionFragment: "maticDebt", values: [string]): string;
  encodeFunctionData(functionFragment: "minDebt", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payBackToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceSourceDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenPeg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "uri", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_minimumCollateralPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCollateralPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkExtract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gainRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClosingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPaid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maticDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payBackToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceSourceDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenPeg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BorrowToken(uint256,uint256)": EventFragment;
    "CreateVault(uint256,address)": EventFragment;
    "DepositCollateral(uint256,uint256)": EventFragment;
    "DestroyVault(uint256)": EventFragment;
    "LiquidateVault(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "PayBackToken(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferVault(uint256,address,address)": EventFragment;
    "WithdrawCollateral(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DestroyVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayBackToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCollateral"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type BorrowTokenEvent = TypedEvent<
  [BigNumber, BigNumber],
  { vaultID: BigNumber; amount: BigNumber }
>;

export type BorrowTokenEventFilter = TypedEventFilter<BorrowTokenEvent>;

export type CreateVaultEvent = TypedEvent<
  [BigNumber, string],
  { vaultID: BigNumber; creator: string }
>;

export type CreateVaultEventFilter = TypedEventFilter<CreateVaultEvent>;

export type DepositCollateralEvent = TypedEvent<
  [BigNumber, BigNumber],
  { vaultID: BigNumber; amount: BigNumber }
>;

export type DepositCollateralEventFilter =
  TypedEventFilter<DepositCollateralEvent>;

export type DestroyVaultEvent = TypedEvent<[BigNumber], { vaultID: BigNumber }>;

export type DestroyVaultEventFilter = TypedEventFilter<DestroyVaultEvent>;

export type LiquidateVaultEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  {
    vaultID: BigNumber;
    owner: string;
    buyer: string;
    debtRepaid: BigNumber;
    collateralLiquidated: BigNumber;
    closingFee: BigNumber;
  }
>;

export type LiquidateVaultEventFilter = TypedEventFilter<LiquidateVaultEvent>;

export type PayBackTokenEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { vaultID: BigNumber; amount: BigNumber; closingFee: BigNumber }
>;

export type PayBackTokenEventFilter = TypedEventFilter<PayBackTokenEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type TransferVaultEvent = TypedEvent<
  [BigNumber, string, string],
  { vaultID: BigNumber; from: string; to: string }
>;

export type TransferVaultEventFilter = TypedEventFilter<TransferVaultEvent>;

export type WithdrawCollateralEvent = TypedEvent<
  [BigNumber, BigNumber],
  { vaultID: BigNumber; amount: BigNumber }
>;

export type WithdrawCollateralEventFilter =
  TypedEventFilter<WithdrawCollateralEvent>;

export interface CrosschainStablecoinSlim extends BaseContract {
  contractName: "CrosschainStablecoinSlim";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrosschainStablecoinSlimInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _minimumCollateralPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkCollateralPercentage(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkCost(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkExtract(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkLiquidation(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    closingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debtRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethPriceSource(overrides?: CallOverrides): Promise<[string]>;

    exists(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    gainRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getClosingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDebtCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEthPriceSource(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPaid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenPriceSource(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidateVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mai(overrides?: CallOverrides): Promise<[string]>;

    maticDebt(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceSourceDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenPeg(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalBorrowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[BigNumber]>;

    uri(overrides?: CallOverrides): Promise<[string]>;

    vaultCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[number]>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _minimumCollateralPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  borrowToken(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkCollateralPercentage(
    vaultID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkCost(
    vaultID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkExtract(
    vaultID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkLiquidation(
    vaultID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  closingFee(overrides?: CallOverrides): Promise<BigNumber>;

  collateral(overrides?: CallOverrides): Promise<string>;

  createVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

  depositCollateral(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroyVault(
    vaultID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethPriceSource(overrides?: CallOverrides): Promise<string>;

  exists(vaultID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  gainRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getClosingFee(overrides?: CallOverrides): Promise<BigNumber>;

  getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  getEthPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

  getPaid(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateVault(
    vaultID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mai(overrides?: CallOverrides): Promise<string>;

  maticDebt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minDebt(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  payBackToken(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceSourceDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    to: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stabilityPool(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenPeg(overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<BigNumber>;

  uri(overrides?: CallOverrides): Promise<string>;

  vaultCollateral(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

  vaultDebt(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<number>;

  withdrawCollateral(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _minimumCollateralPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkCollateralPercentage(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkCost(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkExtract(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkLiquidation(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closingFee(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<string>;

    createVault(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    depositCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ethPriceSource(overrides?: CallOverrides): Promise<string>;

    exists(vaultID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    gainRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getClosingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    getEthPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    getPaid(overrides?: CallOverrides): Promise<void>;

    getTokenPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mai(overrides?: CallOverrides): Promise<string>;

    maticDebt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minDebt(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    priceSourceDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stabilityPool(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPeg(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    uri(overrides?: CallOverrides): Promise<string>;

    vaultCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    vaultDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<number>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BorrowToken(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): BorrowTokenEventFilter;
    BorrowToken(vaultID?: null, amount?: null): BorrowTokenEventFilter;

    "CreateVault(uint256,address)"(
      vaultID?: null,
      creator?: null
    ): CreateVaultEventFilter;
    CreateVault(vaultID?: null, creator?: null): CreateVaultEventFilter;

    "DepositCollateral(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): DepositCollateralEventFilter;
    DepositCollateral(
      vaultID?: null,
      amount?: null
    ): DepositCollateralEventFilter;

    "DestroyVault(uint256)"(vaultID?: null): DestroyVaultEventFilter;
    DestroyVault(vaultID?: null): DestroyVaultEventFilter;

    "LiquidateVault(uint256,address,address,uint256,uint256,uint256)"(
      vaultID?: null,
      owner?: null,
      buyer?: null,
      debtRepaid?: null,
      collateralLiquidated?: null,
      closingFee?: null
    ): LiquidateVaultEventFilter;
    LiquidateVault(
      vaultID?: null,
      owner?: null,
      buyer?: null,
      debtRepaid?: null,
      collateralLiquidated?: null,
      closingFee?: null
    ): LiquidateVaultEventFilter;

    "PayBackToken(uint256,uint256,uint256)"(
      vaultID?: null,
      amount?: null,
      closingFee?: null
    ): PayBackTokenEventFilter;
    PayBackToken(
      vaultID?: null,
      amount?: null,
      closingFee?: null
    ): PayBackTokenEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "TransferVault(uint256,address,address)"(
      vaultID?: null,
      from?: null,
      to?: null
    ): TransferVaultEventFilter;
    TransferVault(
      vaultID?: null,
      from?: null,
      to?: null
    ): TransferVaultEventFilter;

    "WithdrawCollateral(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): WithdrawCollateralEventFilter;
    WithdrawCollateral(
      vaultID?: null,
      amount?: null
    ): WithdrawCollateralEventFilter;
  };

  estimateGas: {
    _minimumCollateralPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkCollateralPercentage(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkCost(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkExtract(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkLiquidation(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closingFee(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    depositCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    exists(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gainRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClosingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    getEthPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    getPaid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mai(overrides?: CallOverrides): Promise<BigNumber>;

    maticDebt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minDebt(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceSourceDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stabilityPool(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPeg(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    uri(overrides?: CallOverrides): Promise<BigNumber>;

    vaultCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    vaultDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _minimumCollateralPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkCollateralPercentage(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkCost(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkExtract(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkLiquidation(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debtRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethPriceSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gainRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClosingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebtCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEthPriceSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenPriceSource(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maticDebt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceSourceDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPeg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBorrowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
